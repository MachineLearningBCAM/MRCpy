
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\further_examples\plot_upperLower.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_further_examples_plot_upperLower.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_further_examples_plot_upperLower.py:


.. _pruebas:

Example: Use of Upper and Lower bound as error estimation
==================================================================

This example is an extension to `ex2` where we will prove how the upper and lower
bound of the loss are an unbiased estimator of the error. The models are trained 
with different number of cases ranging from 10% to 80% of the data and then are
tested with 20% of the samples. The graphs show how in most of the cases 
the error is between those bounds which proves the potential of this feature of
the MRCs. The results are for a :mod:`MRC(phi = 'fourier', loss = '0-1', s = 1)`


.. note::    Note that there is an additional dataset related to COVID-19 patients
             that is available upon requesting to HM Hospitales `here <https://www.hmhospitales.com/coronavirus/covid-data-save-lives/english-version>`_  .
             More information about this dataset can be found in the `COVID example<ex_covid>`

.. GENERATED FROM PYTHON SOURCE LINES 20-138

.. code-block:: default


    # Import needed modules
    import pandas as pd
    import numpy as np
    import time
    import tabulate 

    # sklearn
    from sklearn import preprocessing
    from sklearn.model_selection import train_test_split, RepeatedStratifiedKFold
    from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, classification_report
    # SMOTE over-sampling 
    from imblearn.over_sampling import SMOTE

    #MRCpy
    from MRCpy import MRC,CMRC

    # Data visualisation

    import seaborn as sns
    sns.set_style("whitegrid")
    sns.set_context("paper")
    import matplotlib.pyplot as plt


    def load_covid(norm = False, array = True ):
        data_consensus = pd.read_csv("data/data_consensus.csv", sep=";")

        variable_dict = {'CD0000AGE': 'Age', 'CORE': 'PATIENT_ID', 'CT000000U': 'Urea',
                         'CT00000BT': 'Bilirubin', 'CT00000NA': 'Sodium', 
                         'CT00000TP': 'Proth_time', 'CT0000COM': 'Com', 
                         'CT0000LDH': 'LDH', 'CT0000NEU': 'Neutrophils', 
                         'CT0000PCR': 'Pro_C_Rea', 'CT0000VCM': 'Med_corp_vol', 
                         'CT000APTT': 'Ceph_time','CT000CHCM': 'Mean_corp_Hgb',
                         'CT000EOSP': 'Eosinophils%', 'CT000LEUC': 'Leukocytes',
                         'CT000LINP': 'Lymphocytes%', 'CT000NEUP': 'Neutrophils%',
                         'CT000PLAQ': 'Platelet_count', 'CTHSDXXRATE': 'Rate',
                         'CTHSDXXSAT': 'Sat', 'ED0DISWHY': 'Status',
                         'F_INGRESO/ADMISSION_D_ING/INPAT': 'Fecha_admision',
                         'SEXO/SEX': 'Sexo'}
        data_consensus = data_consensus.rename(columns=variable_dict)
        if norm:
            x_consensus = data_consensus[data_consensus.columns.difference(
                ['Status', 'PATIENT_ID'])][:]
            std_scale = preprocessing.StandardScaler().fit(x_consensus)
            x_consensus_std = std_scale.transform(x_consensus)
            dataframex_consensus = pd.DataFrame(
                x_consensus_std, columns=x_consensus.columns)
            data_consensus.reset_index(drop=True, inplace=True)
            data_consensus = pd.concat(
                [dataframex_consensus, data_consensus[["Status"]]], axis=1)

        data_consensus = data_consensus[data_consensus.columns.difference([
                                                                          'PATIENT_ID'])]
        X = data_consensus[data_consensus.columns.difference(
            ['Status', 'PATIENT_ID'])]
        y = data_consensus['Status']
        if array:
            X = X.to_numpy()
            y = y.to_numpy()
        return X,y
    def getUpperLowerdf(train_size, X, y , cv, paramsMRC, smote = True):
        '''
        Parameters
        ----------
        train_size : array
            Array of different training sizes to train the model.
        cv : CrossValidator
            Cross validator.
        paramsMRC : TYPE
            Parameters for the MRCs.
        smote : Bool, optional
            Class imbalance corrector, set to false to disable. The default is True.
        Returns
        -------
        table : dataFrame
            Dataframe with the results of the training for each training size.

        '''
        if smote:
            smotefit = SMOTE(sampling_strategy='auto')
            X, y = smotefit.fit_resample(X, y)
        table = pd.DataFrame()
        for train_set in train_size:
            for j, (train_index, test_index) in enumerate(cv.split(X, y)):
                X_train, X_test = X[train_index], X[test_index]
                y_train, y_test = y[train_index], y[test_index]
            
                random_indices = np.random.choice(X_train.shape[0], size=int(X.shape[0]*train_set), replace=False)
                X_train = X_train[random_indices,:]
                y_train = y_train[random_indices]
                std_scale = preprocessing.StandardScaler().fit(X_train, y_train)
                X_train = std_scale.transform(X_train)
                X_test = std_scale.transform(X_test)
                start_time = time.time()
                MRC_model = MRC(phi='fourier', s =1, **paramsMRC).fit(X_train, y_train)
                train_time = time.time()-start_time
                auxtable = pd.DataFrame(columns = ['Error','Upper', 'Lower', 'iteration', 'train_size', 'Time'], index = range(0,1))
                auxtable['train_size'] = train_set
                auxtable['iteration'] = j
                auxtable['Error'] = 1-MRC_model.score(X_test,y_test)
                auxtable['Time'] = train_time
                auxtable['Upper'] = MRC_model.get_upper_bound()
                auxtable['Lower'] = MRC_model.get_lower_bound()

                table = table.append(auxtable, ignore_index = True)
        return table

    # Import the datasets
    from MRCpy.datasets import *
    # Data sets
    loaders = [load_mammographic, load_haberman, load_indian_liver,
               load_diabetes, load_credit, load_covid]
    dataName = ["mammographic", "haberman", "indian_liver",
                "diabetes", "credit",'COVID']
    paramsMRC = {'deterministic': False,'fit_intercept': False, 'use_cvx': True, 'loss': '0-1'}
    train = np.arange(0.1,0.81,0.1)








.. GENERATED FROM PYTHON SOURCE LINES 139-143

Cross test validation
~~~~~~~~~~~~~~~~~~~~
5 fold repeated Stratified Cross validation is performed where each of the 
fold is trained with 80% of the data and then tested with the remaining 20%

.. GENERATED FROM PYTHON SOURCE LINES 143-148

.. code-block:: default


    n_splits = 5
    n_repeats = 10
    cv = RepeatedStratifiedKFold(n_splits=n_splits,n_repeats =n_repeats, random_state=1)








.. GENERATED FROM PYTHON SOURCE LINES 149-155

Results
====================
We will present the results for the 6 datasets. For more information 
about the dataset refer to the `MRCpy documentation <https://machinelearningbcam.github.io/MRCpy/getting_started.html#dataset-loaders>`_ of the loaders.
In the results we can see how the upper and lower bounds get closer when the training 
size is increased. Furthermore, the standard deviation of both bounds is reduced significantly. 

.. GENERATED FROM PYTHON SOURCE LINES 157-159

Mammographic
~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 159-169

.. code-block:: default

    X, y = load_mammographic()
    table = getUpperLowerdf(train, X, y, cv, paramsMRC)
    # dataframes.append(table)
    # plotUpperLower(table)
    means = table[table.columns.difference(['iteration'])].groupby('train_size').mean()
    std = table[table.columns.difference(['iteration'])].groupby('train_size').std()
    for column in means.columns:
        means[column] = means[column].round(3).astype(str) + ' ± ' +std[column].round(3).astype(str)
    means[['Error','Upper','Lower', 'Time']]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Error</th>
          <th>Upper</th>
          <th>Lower</th>
          <th>Time</th>
        </tr>
        <tr>
          <th>train_size</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0.1</th>
          <td>0.222 ± 0.032</td>
          <td>0.235 ± 0.029</td>
          <td>0.147 ± 0.031</td>
          <td>0.221 ± 0.043</td>
        </tr>
        <tr>
          <th>0.2</th>
          <td>0.202 ± 0.028</td>
          <td>0.22 ± 0.022</td>
          <td>0.144 ± 0.024</td>
          <td>0.354 ± 0.022</td>
        </tr>
        <tr>
          <th>0.3</th>
          <td>0.203 ± 0.032</td>
          <td>0.217 ± 0.015</td>
          <td>0.149 ± 0.017</td>
          <td>0.527 ± 0.036</td>
        </tr>
        <tr>
          <th>0.4</th>
          <td>0.2 ± 0.028</td>
          <td>0.214 ± 0.016</td>
          <td>0.152 ± 0.02</td>
          <td>0.62 ± 0.033</td>
        </tr>
        <tr>
          <th>0.5</th>
          <td>0.2 ± 0.03</td>
          <td>0.216 ± 0.015</td>
          <td>0.16 ± 0.018</td>
          <td>0.718 ± 0.033</td>
        </tr>
        <tr>
          <th>0.6</th>
          <td>0.197 ± 0.031</td>
          <td>0.216 ± 0.012</td>
          <td>0.164 ± 0.015</td>
          <td>0.844 ± 0.041</td>
        </tr>
        <tr>
          <th>0.7</th>
          <td>0.197 ± 0.031</td>
          <td>0.215 ± 0.01</td>
          <td>0.165 ± 0.013</td>
          <td>0.954 ± 0.039</td>
        </tr>
        <tr>
          <th>0.8</th>
          <td>0.2 ± 0.029</td>
          <td>0.216 ± 0.008</td>
          <td>0.167 ± 0.01</td>
          <td>1.056 ± 0.044</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 170-177

.. code-block:: default

    fig, ax = plt.subplots()
    sns.lineplot(data = table,x ='train_size', y = 'Error', label = 'Test Error', ax = ax)
    sns.lineplot(data = table,x ='train_size', y = 'Upper', color = 'red', label = 'Upper bound', linestyle = 'dotted', ax = ax)
    sns.lineplot(data = table,x ='train_size', y = 'Lower', color = 'green', label = 'Lower bound',  linestyle = 'dotted', ax = ax)
    plt.suptitle('Mammographic')
    plt.show()




.. image-sg:: /auto_examples/further_examples/images/sphx_glr_plot_upperLower_001.png
   :alt: Mammographic
   :srcset: /auto_examples/further_examples/images/sphx_glr_plot_upperLower_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 178-180

Haberman
~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 180-189

.. code-block:: default


    X, y = load_haberman()
    table = getUpperLowerdf(train, X, y, cv, paramsMRC)
    means = table[table.columns.difference(['iteration'])].groupby('train_size').mean()
    std = table[table.columns.difference(['iteration'])].groupby('train_size').std()
    for column in means.columns:
        means[column] = means[column].round(3).astype(str) + ' ± ' +std[column].round(3).astype(str)
    means[['Error','Upper','Lower', 'Time']]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Error</th>
          <th>Upper</th>
          <th>Lower</th>
          <th>Time</th>
        </tr>
        <tr>
          <th>train_size</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0.1</th>
          <td>0.444 ± 0.057</td>
          <td>0.424 ± 0.032</td>
          <td>0.319 ± 0.047</td>
          <td>0.112 ± 0.017</td>
        </tr>
        <tr>
          <th>0.2</th>
          <td>0.396 ± 0.052</td>
          <td>0.406 ± 0.024</td>
          <td>0.295 ± 0.035</td>
          <td>0.191 ± 0.023</td>
        </tr>
        <tr>
          <th>0.3</th>
          <td>0.378 ± 0.054</td>
          <td>0.398 ± 0.017</td>
          <td>0.296 ± 0.028</td>
          <td>0.27 ± 0.019</td>
        </tr>
        <tr>
          <th>0.4</th>
          <td>0.372 ± 0.052</td>
          <td>0.391 ± 0.018</td>
          <td>0.294 ± 0.025</td>
          <td>0.333 ± 0.022</td>
        </tr>
        <tr>
          <th>0.5</th>
          <td>0.374 ± 0.046</td>
          <td>0.387 ± 0.014</td>
          <td>0.291 ± 0.02</td>
          <td>0.427 ± 0.026</td>
        </tr>
        <tr>
          <th>0.6</th>
          <td>0.368 ± 0.045</td>
          <td>0.384 ± 0.012</td>
          <td>0.291 ± 0.015</td>
          <td>0.506 ± 0.027</td>
        </tr>
        <tr>
          <th>0.7</th>
          <td>0.354 ± 0.047</td>
          <td>0.38 ± 0.01</td>
          <td>0.288 ± 0.013</td>
          <td>0.552 ± 0.031</td>
        </tr>
        <tr>
          <th>0.8</th>
          <td>0.366 ± 0.059</td>
          <td>0.379 ± 0.007</td>
          <td>0.289 ± 0.009</td>
          <td>0.609 ± 0.03</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 190-197

.. code-block:: default

    fig, ax = plt.subplots()
    sns.lineplot(data = table,x ='train_size', y = 'Error', label = 'Test Error', ax = ax)
    sns.lineplot(data = table,x ='train_size', y = 'Upper', color = 'red', label = 'Upper bound', linestyle = 'dotted', ax = ax)
    sns.lineplot(data = table,x ='train_size', y = 'Lower', color = 'green', label = 'Lower bound',  linestyle = 'dotted', ax = ax)
    plt.suptitle('Haberman')
    plt.show()




.. image-sg:: /auto_examples/further_examples/images/sphx_glr_plot_upperLower_002.png
   :alt: Haberman
   :srcset: /auto_examples/further_examples/images/sphx_glr_plot_upperLower_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 198-200

Indian liver
~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 200-208

.. code-block:: default

    X, y = load_indian_liver()

    table = getUpperLowerdf(train, X, y, cv, paramsMRC)
    means = table[table.columns.difference(['iteration'])].groupby('train_size').mean()
    std = table[table.columns.difference(['iteration'])].groupby('train_size').std()
    for column in means.columns:
        means[column] = means[column].round(3).astype(str) + ' ± ' +std[column].round(3).astype(str)
    means[['Error','Upper','Lower', 'Time']]





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Error</th>
          <th>Upper</th>
          <th>Lower</th>
          <th>Time</th>
        </tr>
        <tr>
          <th>train_size</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0.1</th>
          <td>0.388 ± 0.043</td>
          <td>0.37 ± 0.028</td>
          <td>0.258 ± 0.033</td>
          <td>0.172 ± 0.019</td>
        </tr>
        <tr>
          <th>0.2</th>
          <td>0.364 ± 0.039</td>
          <td>0.367 ± 0.022</td>
          <td>0.266 ± 0.026</td>
          <td>0.313 ± 0.03</td>
        </tr>
        <tr>
          <th>0.3</th>
          <td>0.358 ± 0.036</td>
          <td>0.359 ± 0.015</td>
          <td>0.267 ± 0.018</td>
          <td>0.478 ± 0.03</td>
        </tr>
        <tr>
          <th>0.4</th>
          <td>0.354 ± 0.036</td>
          <td>0.363 ± 0.011</td>
          <td>0.277 ± 0.015</td>
          <td>0.579 ± 0.028</td>
        </tr>
        <tr>
          <th>0.5</th>
          <td>0.352 ± 0.039</td>
          <td>0.362 ± 0.011</td>
          <td>0.28 ± 0.014</td>
          <td>0.707 ± 0.03</td>
        </tr>
        <tr>
          <th>0.6</th>
          <td>0.348 ± 0.031</td>
          <td>0.364 ± 0.008</td>
          <td>0.284 ± 0.01</td>
          <td>0.856 ± 0.026</td>
        </tr>
        <tr>
          <th>0.7</th>
          <td>0.348 ± 0.031</td>
          <td>0.361 ± 0.006</td>
          <td>0.283 ± 0.008</td>
          <td>1.02 ± 0.049</td>
        </tr>
        <tr>
          <th>0.8</th>
          <td>0.346 ± 0.038</td>
          <td>0.361 ± 0.005</td>
          <td>0.285 ± 0.008</td>
          <td>1.142 ± 0.048</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 209-215

.. code-block:: default

    fig, ax = plt.subplots()
    sns.lineplot(data = table,x ='train_size', y = 'Error', label = 'Test Error', ax = ax)
    sns.lineplot(data = table,x ='train_size', y = 'Upper', color = 'red', label = 'Upper bound', linestyle = 'dotted', ax = ax)
    sns.lineplot(data = table,x ='train_size', y = 'Lower', color = 'green', label = 'Lower bound',  linestyle = 'dotted', ax = ax)
    plt.suptitle('Indian Liver')
    plt.show()



.. image-sg:: /auto_examples/further_examples/images/sphx_glr_plot_upperLower_003.png
   :alt: Indian Liver
   :srcset: /auto_examples/further_examples/images/sphx_glr_plot_upperLower_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 216-218

diabetes
~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 218-227

.. code-block:: default

    X, y = load_diabetes()

    table = getUpperLowerdf(train, X, y, cv, paramsMRC)
    means = table[table.columns.difference(['iteration'])].groupby('train_size').mean()
    std = table[table.columns.difference(['iteration'])].groupby('train_size').std()
    for column in means.columns:
        means[column] = means[column].round(3).astype(str) + ' ± ' +std[column].round(3).astype(str)
    means[['Error','Upper','Lower', 'Time']]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Error</th>
          <th>Upper</th>
          <th>Lower</th>
          <th>Time</th>
        </tr>
        <tr>
          <th>train_size</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0.1</th>
          <td>0.321 ± 0.038</td>
          <td>0.319 ± 0.023</td>
          <td>0.226 ± 0.028</td>
          <td>0.207 ± 0.023</td>
        </tr>
        <tr>
          <th>0.2</th>
          <td>0.303 ± 0.032</td>
          <td>0.313 ± 0.017</td>
          <td>0.234 ± 0.018</td>
          <td>0.371 ± 0.02</td>
        </tr>
        <tr>
          <th>0.3</th>
          <td>0.303 ± 0.03</td>
          <td>0.314 ± 0.013</td>
          <td>0.24 ± 0.014</td>
          <td>0.591 ± 0.05</td>
        </tr>
        <tr>
          <th>0.4</th>
          <td>0.302 ± 0.034</td>
          <td>0.308 ± 0.012</td>
          <td>0.241 ± 0.014</td>
          <td>0.703 ± 0.039</td>
        </tr>
        <tr>
          <th>0.5</th>
          <td>0.301 ± 0.038</td>
          <td>0.309 ± 0.007</td>
          <td>0.241 ± 0.012</td>
          <td>0.884 ± 0.049</td>
        </tr>
        <tr>
          <th>0.6</th>
          <td>0.295 ± 0.039</td>
          <td>0.307 ± 0.009</td>
          <td>0.245 ± 0.008</td>
          <td>1.05 ± 0.035</td>
        </tr>
        <tr>
          <th>0.7</th>
          <td>0.287 ± 0.031</td>
          <td>0.304 ± 0.008</td>
          <td>0.243 ± 0.008</td>
          <td>1.23 ± 0.043</td>
        </tr>
        <tr>
          <th>0.8</th>
          <td>0.294 ± 0.031</td>
          <td>0.304 ± 0.005</td>
          <td>0.244 ± 0.007</td>
          <td>1.412 ± 0.046</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 228-234

.. code-block:: default

    fig, ax = plt.subplots()
    sns.lineplot(data = table,x ='train_size', y = 'Error', label = 'Test Error', ax = ax)
    sns.lineplot(data = table,x ='train_size', y = 'Upper', color = 'red', label = 'Upper bound', linestyle = 'dotted', ax = ax)
    sns.lineplot(data = table,x ='train_size', y = 'Lower', color = 'green', label = 'Lower bound',  linestyle = 'dotted', ax = ax)
    plt.suptitle('Diabetes')
    plt.show()



.. image-sg:: /auto_examples/further_examples/images/sphx_glr_plot_upperLower_004.png
   :alt: Diabetes
   :srcset: /auto_examples/further_examples/images/sphx_glr_plot_upperLower_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 235-237

credit
~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 237-246

.. code-block:: default

    X, y = load_credit()

    table = getUpperLowerdf(train, X, y, cv, paramsMRC)
    means = table[table.columns.difference(['iteration'])].groupby('train_size').mean()
    std = table[table.columns.difference(['iteration'])].groupby('train_size').std()
    for column in means.columns:
        means[column] = means[column].round(3).astype(str) + ' ± ' +std[column].round(3).astype(str)
    means[['Error','Upper','Lower', 'Time']]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Error</th>
          <th>Upper</th>
          <th>Lower</th>
          <th>Time</th>
        </tr>
        <tr>
          <th>train_size</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0.1</th>
          <td>0.185 ± 0.033</td>
          <td>0.226 ± 0.035</td>
          <td>0.067 ± 0.039</td>
          <td>0.161 ± 0.019</td>
        </tr>
        <tr>
          <th>0.2</th>
          <td>0.171 ± 0.03</td>
          <td>0.204 ± 0.017</td>
          <td>0.078 ± 0.018</td>
          <td>0.298 ± 0.016</td>
        </tr>
        <tr>
          <th>0.3</th>
          <td>0.168 ± 0.029</td>
          <td>0.205 ± 0.017</td>
          <td>0.097 ± 0.019</td>
          <td>0.441 ± 0.024</td>
        </tr>
        <tr>
          <th>0.4</th>
          <td>0.169 ± 0.033</td>
          <td>0.2 ± 0.011</td>
          <td>0.101 ± 0.012</td>
          <td>0.557 ± 0.03</td>
        </tr>
        <tr>
          <th>0.5</th>
          <td>0.165 ± 0.026</td>
          <td>0.2 ± 0.013</td>
          <td>0.107 ± 0.013</td>
          <td>0.692 ± 0.03</td>
        </tr>
        <tr>
          <th>0.6</th>
          <td>0.17 ± 0.027</td>
          <td>0.195 ± 0.011</td>
          <td>0.111 ± 0.01</td>
          <td>0.81 ± 0.035</td>
        </tr>
        <tr>
          <th>0.7</th>
          <td>0.166 ± 0.028</td>
          <td>0.197 ± 0.008</td>
          <td>0.117 ± 0.008</td>
          <td>0.963 ± 0.049</td>
        </tr>
        <tr>
          <th>0.8</th>
          <td>0.169 ± 0.029</td>
          <td>0.196 ± 0.007</td>
          <td>0.118 ± 0.006</td>
          <td>1.082 ± 0.042</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 247-253

.. code-block:: default

    fig, ax = plt.subplots()
    sns.lineplot(data = table,x ='train_size', y = 'Error', label = 'Test Error', ax = ax)
    sns.lineplot(data = table,x ='train_size', y = 'Upper', color = 'red', label = 'Upper bound', linestyle = 'dotted', ax = ax)
    sns.lineplot(data = table,x ='train_size', y = 'Lower', color = 'green', label = 'Lower bound',  linestyle = 'dotted', ax = ax)
    plt.suptitle('Credit')
    plt.show()



.. image-sg:: /auto_examples/further_examples/images/sphx_glr_plot_upperLower_005.png
   :alt: Credit
   :srcset: /auto_examples/further_examples/images/sphx_glr_plot_upperLower_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 254-256

COVID
~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 256-265

.. code-block:: default

    X, y = load_covid()

    table = getUpperLowerdf(train, X, y, cv, paramsMRC)
    means = table[table.columns.difference(['iteration'])].groupby('train_size').mean()
    std = table[table.columns.difference(['iteration'])].groupby('train_size').std()
    for column in means.columns:
        means[column] = means[column].round(3).astype(str) + ' ± ' +std[column].round(3).astype(str)
    means[['Error','Upper','Lower', 'Time']]






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Error</th>
          <th>Upper</th>
          <th>Lower</th>
          <th>Time</th>
        </tr>
        <tr>
          <th>train_size</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0.1</th>
          <td>0.278 ± 0.021</td>
          <td>0.293 ± 0.013</td>
          <td>0.183 ± 0.019</td>
          <td>0.542 ± 0.03</td>
        </tr>
        <tr>
          <th>0.2</th>
          <td>0.271 ± 0.021</td>
          <td>0.289 ± 0.01</td>
          <td>0.198 ± 0.012</td>
          <td>1.069 ± 0.04</td>
        </tr>
        <tr>
          <th>0.3</th>
          <td>0.265 ± 0.019</td>
          <td>0.289 ± 0.008</td>
          <td>0.202 ± 0.009</td>
          <td>1.608 ± 0.166</td>
        </tr>
        <tr>
          <th>0.4</th>
          <td>0.264 ± 0.02</td>
          <td>0.287 ± 0.007</td>
          <td>0.207 ± 0.008</td>
          <td>2.138 ± 0.07</td>
        </tr>
        <tr>
          <th>0.5</th>
          <td>0.264 ± 0.017</td>
          <td>0.285 ± 0.006</td>
          <td>0.206 ± 0.007</td>
          <td>2.729 ± 0.064</td>
        </tr>
        <tr>
          <th>0.6</th>
          <td>0.259 ± 0.019</td>
          <td>0.283 ± 0.005</td>
          <td>0.207 ± 0.006</td>
          <td>3.29 ± 0.081</td>
        </tr>
        <tr>
          <th>0.7</th>
          <td>0.263 ± 0.014</td>
          <td>0.283 ± 0.005</td>
          <td>0.208 ± 0.005</td>
          <td>3.902 ± 0.084</td>
        </tr>
        <tr>
          <th>0.8</th>
          <td>0.257 ± 0.018</td>
          <td>0.282 ± 0.005</td>
          <td>0.208 ± 0.007</td>
          <td>4.446 ± 0.098</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 266-271

.. code-block:: default

    fig, ax = plt.subplots()
    sns.lineplot(data = table,x ='train_size', y = 'Error', label = 'Test Error', ax = ax)
    sns.lineplot(data = table,x ='train_size', y = 'Upper', color = 'red', label = 'Upper bound', linestyle = 'dotted', ax = ax)
    sns.lineplot(data = table,x ='train_size', y = 'Lower', color = 'green', label = 'Lower bound',  linestyle = 'dotted', ax = ax)
    plt.suptitle('COVID')
    plt.show()


.. image-sg:: /auto_examples/further_examples/images/sphx_glr_plot_upperLower_006.png
   :alt: COVID
   :srcset: /auto_examples/further_examples/images/sphx_glr_plot_upperLower_006.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 73 minutes  14.371 seconds)


.. _sphx_glr_download_auto_examples_further_examples_plot_upperLower.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_upperLower.py <plot_upperLower.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_upperLower.ipynb <plot_upperLower.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
