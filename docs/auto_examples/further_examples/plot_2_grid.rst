
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/further_examples/plot_2_grid.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_further_examples_plot_2_grid.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_further_examples_plot_2_grid.py:


.. _grid:

Hyperparameter Tuning: Upper Bound vs Cross-Validation
==============================================================================

Example of how to use the Upper Bounds provided by the `MRC` method in the
`MRCpy` library for hyperparameter tuning and comparison to Cross-Validation.
We will see that using the Upper Bound gets similar performances to
Cross-Validation but being four times faster.

We are using '0-1' loss and `RandomFourierPhi`
map (`phi='fourier'`). We are going to tune the scaling parameter
`sigma` and the regularization parameter `s` of the
feature mapping using a random grid. We will used the usual method
:ref:`RandomizedSearchCV<https://scikit-learn.org/stable/modules/
generated/sklearn.model_selection.RandomizedSearchCV.html>`
from `scikit-learn`.

Note that we set the parameter use_cvx=False. In the case of MRC classifiers
this means that we will use nesterov subgradient optimized approach to
perform the optimization.

.. GENERATED FROM PYTHON SOURCE LINES 25-41

.. code-block:: default


    # Import needed modules
    import random
    import time

    import matplotlib.pyplot as plt
    import numpy as np
    import pandas as pd
    from scipy.spatial import distance
    from sklearn import preprocessing
    from sklearn.model_selection import RandomizedSearchCV, train_test_split

    from MRCpy import MRC
    from MRCpy.datasets import *









.. GENERATED FROM PYTHON SOURCE LINES 42-53

Random Grid using Upper Bound parameter
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We select random `n_iter` random set of values for the parameters to tune in
a given range and select the pair of parameters which minimizes the upper
bound provided by the MRC method.
On each repetition we calculate and store the upper bound for each possible
value of sigma.
The parameter `n_iter` means the amount of randomly selected vectors for the
parameters to
tune are chosen. We are selecting `n_iter = 10` because it is the default
value for the RandomGridCV method.

.. GENERATED FROM PYTHON SOURCE LINES 53-84

.. code-block:: default



    def run_RandomGridUpper(X_train, Y_train, X_test, Y_test, sigma_ini, sigma_fin,
                            s_ini, s_fin):
        n_iter = 10
        startTime = time.time()
        sigma_id = [(sigma_fin - sigma_ini) * random.random() + sigma_ini
                    for i in range(n_iter)]
        s_id = [(s_fin - s_ini) * random.random() + s_ini for i in range(n_iter)]
        upps = np.zeros(n_iter)

        for i in range(n_iter):
            clf = MRC(phi='fourier', sigma=sigma_id[i], s=s_id[i], random_state=0,
                      deterministic=False, use_cvx=False)
            clf.fit(X_train, Y_train)
            upps[i] = clf.get_upper_bound()

        min_upp = np.min(upps)
        best_sigma = sigma_id[np.argmin(upps)]
        best_s = s_id[np.argmin(upps)]
        clf = MRC(phi='fourier', sigma=best_sigma, s=best_s, random_state=0,
                  deterministic=False, use_cvx=False)
        clf.fit(X_train, Y_train)
        Y_pred = clf.predict(X_test)
        best_err = np.average(Y_pred != Y_test)
        totalTime = time.time() - startTime

        return {'upper': min_upp, 's': best_s,
                'sigma': best_sigma, 'time': totalTime, 'error': best_err}









.. GENERATED FROM PYTHON SOURCE LINES 85-87

RandomGridCV
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 87-118

.. code-block:: default


    def run_RandomGridCV(X_train, Y_train, X_test, Y_test, sigma_ini, sigma_fin,
                         s_ini, s_fin):
        n_iter = 10
        startTime = time.time()
        X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25,
                                                            random_state=rep)
        # Normalizing the data
        std_scale = preprocessing.StandardScaler().fit(X_train, Y_train)
        X_train = std_scale.transform(X_train)
        X_test = std_scale.transform(X_test)

        sigma_values = np.linspace(sigma_ini, sigma_fin, num=5000)
        s_values = np.linspace(s_ini, s_fin, num=5000)
        param = {'sigma': sigma_values, 's': s_values}

        mrc = MRC(phi='fourier', random_state=0, deterministic=False,
                  use_cvx=False)
        clf = RandomizedSearchCV(mrc, param, random_state=0, n_iter=n_iter)
        clf.fit(X_train, Y_train)
        Y_pred = clf.predict(X_test)
        error = np.average(Y_pred != Y_test)

        totalTime = time.time() - startTime

        return {'upper': clf.best_estimator_.get_upper_bound(),
                's': clf.best_estimator_.s,
                'sigma': clf.best_estimator_.phi.sigma_val,
                'time': totalTime, 'error': error}









.. GENERATED FROM PYTHON SOURCE LINES 119-131

Comparison
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We are performing both of the previous methods for hyperparameter tuning
over a set of different datasets and comparing the performances.
Before calling them, we set a range of values for the hyperpatameters.
An intuituve way of choosing sigma is to choose values in the range of the
distance among the pairs of instances in the trainign set `X_train`.
Empirical knowledge tells us that best values for s use to be around
0.3 and 0.6.

We repeat these processes several times to make sure performances do not
rely heavily on the train_test_split selected.

.. GENERATED FROM PYTHON SOURCE LINES 131-222

.. code-block:: default



    def plot_table(df, title, color):
        fig, ax = plt.subplots()
        # hide axes
        fig.patch.set_visible(False)
        ax.axis('off')
        ax.axis('tight')
        t = ax.table(cellText=df.values, colLabels=df.columns, loc='center',
                     colColours=color, cellColours=[color] * len(df))
        t.auto_set_font_size(False)
        t.set_fontsize(8)
        t.auto_set_column_width(col=list(range(len(df.columns))))
        fig.tight_layout()
        plt.title(title)
        plt.show()


    loaders = [load_mammographic, load_haberman, load_indian_liver,
               load_diabetes, load_credit]
    dataNameList = ["mammographic", "haberman", "indian_liver",
                    "diabetes", "credit"]

    dfCV = pd.DataFrame()
    dfUpper = pd.DataFrame()
    f = '%1.3g'  # format
    for j, load in enumerate(loaders):

        # Loading the dataset
        X, Y = load()
        dataName = dataNameList[j]

        # In order to avoid the possible bias made by the choice of the train-test
        # split, we do this process several (20) times and average the
        # obtained results
        dfCV_aux = pd.DataFrame()
        dfUpper_aux = pd.DataFrame()
        for rep in range(10):
            X_train, X_test, Y_train, Y_test = \
                train_test_split(X, Y, test_size=0.25, random_state=rep)
            # Normalizing the data
            std_scale = preprocessing.StandardScaler().fit(X_train, Y_train)
            X_train = std_scale.transform(X_train)
            X_test = std_scale.transform(X_test)

            # Select an appropiate range for sigma
            d = np.triu(distance.cdist(X_train, X_train)).flatten()
            d = d[d != 0]
            d.sort()
            sigma_ini = d[int(len(d) * 0.1)]
            sigma_fin = d[int(len(d) * 0.3)]
            s_ini = 0.3
            s_fin = 0.6

            # We tune the parameters using both method and store the results
            dfCV_aux = dfCV_aux.append(
                run_RandomGridCV(X_train, Y_train, X_test, Y_test, sigma_ini,
                                 sigma_fin, s_ini, s_fin), ignore_index=True)
            dfUpper_aux = dfUpper_aux.append(
                run_RandomGridUpper(X_train, Y_train, X_test, Y_test, sigma_ini,
                                    sigma_fin, s_ini, s_fin), ignore_index=True)

        # We save the mean results of the 20 repetitions
        mean_err = f % np.mean(dfCV_aux['error']) + ' ± ' + \
            f % np.std(dfCV_aux['error'])
        mean_sig = f % np.mean(dfCV_aux['sigma']) + ' ± ' + \
            f % np.std(dfCV_aux['sigma'])
        mean_s = f % np.mean(dfCV_aux['s']) + ' ± ' + f % np.std(dfCV_aux['s'])
        mean_time = f % np.mean(dfCV_aux['time']) + ' ± ' + \
            f % np.std(dfCV_aux['time'])
        mean_upper = f % np.mean(dfCV_aux['upper']) + ' ± ' + \
            f % np.std(dfCV_aux['upper'])
        dfCV = dfCV.append({'dataset': dataName, 'error': mean_err,
                            'sigma': mean_sig, 's': mean_s,
                            'upper': mean_upper,
                            'time': mean_time}, ignore_index=True)
        mean_err = f % np.mean(dfUpper_aux['error']) + ' ± ' + \
            f % np.std(dfUpper_aux['error'])
        mean_sig = f % np.mean(dfUpper_aux['sigma']) + ' ± ' + \
            f % np.std(dfUpper_aux['sigma'])
        mean_s = f % np.mean(dfUpper_aux['s']) + ' ± ' + \
            f % np.std(dfUpper_aux['s'])
        mean_time = f % np.mean(dfUpper_aux['time']) + ' ± ' + \
            f % np.std(dfUpper_aux['time'])
        mean_upper = f % np.mean(dfUpper_aux['upper']) + ' ± ' + \
            f % np.std(dfUpper_aux['upper'])
        dfUpper = dfUpper.append({'dataset': dataName, 'error': mean_err,
                                  'sigma': mean_sig, 's': mean_s,
                                  'upper': mean_upper,
                                  'time': mean_time}, ignore_index=True)








.. GENERATED FROM PYTHON SOURCE LINES 223-227

.. code-block:: default


    dfCV.style.set_caption('RandomGridCV Results').set_properties(
        **{'background-color': 'lightskyblue'}, subset=['error', 'time'])






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style type="text/css">
    #T_0e1cb_row0_col1, #T_0e1cb_row0_col5, #T_0e1cb_row1_col1, #T_0e1cb_row1_col5, #T_0e1cb_row2_col1, #T_0e1cb_row2_col5, #T_0e1cb_row3_col1, #T_0e1cb_row3_col5, #T_0e1cb_row4_col1, #T_0e1cb_row4_col5 {
      background-color: lightskyblue;
    }
    </style>
    <table id="T_0e1cb">
      <caption>RandomGridCV Results</caption>
      <thead>
        <tr>
          <th class="blank level0" >&nbsp;</th>
          <th id="T_0e1cb_level0_col0" class="col_heading level0 col0" >dataset</th>
          <th id="T_0e1cb_level0_col1" class="col_heading level0 col1" >error</th>
          <th id="T_0e1cb_level0_col2" class="col_heading level0 col2" >sigma</th>
          <th id="T_0e1cb_level0_col3" class="col_heading level0 col3" >s</th>
          <th id="T_0e1cb_level0_col4" class="col_heading level0 col4" >upper</th>
          <th id="T_0e1cb_level0_col5" class="col_heading level0 col5" >time</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th id="T_0e1cb_level0_row0" class="row_heading level0 row0" >0</th>
          <td id="T_0e1cb_row0_col0" class="data row0 col0" >mammographic</td>
          <td id="T_0e1cb_row0_col1" class="data row0 col1" >0.221 ± 0.0286</td>
          <td id="T_0e1cb_row0_col2" class="data row0 col2" >1.58 ± 2e-15</td>
          <td id="T_0e1cb_row0_col3" class="data row0 col3" >0.419 ± 0.101</td>
          <td id="T_0e1cb_row0_col4" class="data row0 col4" >0.227 ± 0.0116</td>
          <td id="T_0e1cb_row0_col5" class="data row0 col5" >41.7 ± 0.268</td>
        </tr>
        <tr>
          <th id="T_0e1cb_level0_row1" class="row_heading level0 row1" >1</th>
          <td id="T_0e1cb_row1_col0" class="data row1 col0" >haberman</td>
          <td id="T_0e1cb_row1_col1" class="data row1 col1" >0.274 ± 0.0534</td>
          <td id="T_0e1cb_row1_col2" class="data row1 col2" >1.22 ± 4.97e-16</td>
          <td id="T_0e1cb_row1_col3" class="data row1 col3" >0.466 ± 0.104</td>
          <td id="T_0e1cb_row1_col4" class="data row1 col4" >0.267 ± 0.017</td>
          <td id="T_0e1cb_row1_col5" class="data row1 col5" >35.3 ± 0.661</td>
        </tr>
        <tr>
          <th id="T_0e1cb_level0_row2" class="row_heading level0 row2" >2</th>
          <td id="T_0e1cb_row2_col0" class="data row2 col0" >indian_liver</td>
          <td id="T_0e1cb_row2_col1" class="data row2 col1" >0.288 ± 0.0179</td>
          <td id="T_0e1cb_row2_col2" class="data row2 col2" >2.24 ± 5.06e-16</td>
          <td id="T_0e1cb_row2_col3" class="data row2 col3" >0.403 ± 0.0446</td>
          <td id="T_0e1cb_row2_col4" class="data row2 col4" >0.295 ± 0.00593</td>
          <td id="T_0e1cb_row2_col5" class="data row2 col5" >42.7 ± 0.295</td>
        </tr>
        <tr>
          <th id="T_0e1cb_level0_row3" class="row_heading level0 row3" >3</th>
          <td id="T_0e1cb_row3_col0" class="data row3 col0" >diabetes</td>
          <td id="T_0e1cb_row3_col1" class="data row3 col1" >0.29 ± 0.0218</td>
          <td id="T_0e1cb_row3_col2" class="data row3 col2" >2 ± 8.25e-16</td>
          <td id="T_0e1cb_row3_col3" class="data row3 col3" >0.429 ± 0.0858</td>
          <td id="T_0e1cb_row3_col4" class="data row3 col4" >0.285 ± 0.00872</td>
          <td id="T_0e1cb_row3_col5" class="data row3 col5" >43 ± 0.412</td>
        </tr>
        <tr>
          <th id="T_0e1cb_level0_row4" class="row_heading level0 row4" >4</th>
          <td id="T_0e1cb_row4_col0" class="data row4 col0" >credit</td>
          <td id="T_0e1cb_row4_col1" class="data row4 col1" >0.18 ± 0.0393</td>
          <td id="T_0e1cb_row4_col2" class="data row4 col2" >2.74 ± 1.76e-15</td>
          <td id="T_0e1cb_row4_col3" class="data row4 col3" >0.51 ± 0.0893</td>
          <td id="T_0e1cb_row4_col4" class="data row4 col4" >0.2 ± 0.00959</td>
          <td id="T_0e1cb_row4_col5" class="data row4 col5" >40.1 ± 0.0986</td>
        </tr>
      </tbody>
    </table>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 228-232

.. code-block:: default


    dfUpper.style.set_caption('RandomGridUpper Results').set_properties(
        **{'background-color': 'lightskyblue'}, subset=['error', 'time'])






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style type="text/css">
    #T_44556_row0_col1, #T_44556_row0_col5, #T_44556_row1_col1, #T_44556_row1_col5, #T_44556_row2_col1, #T_44556_row2_col5, #T_44556_row3_col1, #T_44556_row3_col5, #T_44556_row4_col1, #T_44556_row4_col5 {
      background-color: lightskyblue;
    }
    </style>
    <table id="T_44556">
      <caption>RandomGridUpper Results</caption>
      <thead>
        <tr>
          <th class="blank level0" >&nbsp;</th>
          <th id="T_44556_level0_col0" class="col_heading level0 col0" >dataset</th>
          <th id="T_44556_level0_col1" class="col_heading level0 col1" >error</th>
          <th id="T_44556_level0_col2" class="col_heading level0 col2" >sigma</th>
          <th id="T_44556_level0_col3" class="col_heading level0 col3" >s</th>
          <th id="T_44556_level0_col4" class="col_heading level0 col4" >upper</th>
          <th id="T_44556_level0_col5" class="col_heading level0 col5" >time</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th id="T_44556_level0_row0" class="row_heading level0 row0" >0</th>
          <td id="T_44556_row0_col0" class="data row0 col0" >mammographic</td>
          <td id="T_44556_row0_col1" class="data row0 col1" >0.21 ± 0.0239</td>
          <td id="T_44556_row0_col2" class="data row0 col2" >1.35 ± 0.211</td>
          <td id="T_44556_row0_col3" class="data row0 col3" >0.324 ± 0.0191</td>
          <td id="T_44556_row0_col4" class="data row0 col4" >0.224 ± 0.0127</td>
          <td id="T_44556_row0_col5" class="data row0 col5" >9.5 ± 0.153</td>
        </tr>
        <tr>
          <th id="T_44556_level0_row1" class="row_heading level0 row1" >1</th>
          <td id="T_44556_row1_col0" class="data row1 col0" >haberman</td>
          <td id="T_44556_row1_col1" class="data row1 col1" >0.273 ± 0.0532</td>
          <td id="T_44556_row1_col2" class="data row1 col2" >1.19 ± 0.178</td>
          <td id="T_44556_row1_col3" class="data row1 col3" >0.34 ± 0.0156</td>
          <td id="T_44556_row1_col4" class="data row1 col4" >0.261 ± 0.0159</td>
          <td id="T_44556_row1_col5" class="data row1 col5" >8.08 ± 0.106</td>
        </tr>
        <tr>
          <th id="T_44556_level0_row2" class="row_heading level0 row2" >2</th>
          <td id="T_44556_row2_col0" class="data row2 col0" >indian_liver</td>
          <td id="T_44556_row2_col1" class="data row2 col1" >0.288 ± 0.0179</td>
          <td id="T_44556_row2_col2" class="data row2 col2" >2.48 ± 0.329</td>
          <td id="T_44556_row2_col3" class="data row2 col3" >0.321 ± 0.0168</td>
          <td id="T_44556_row2_col4" class="data row2 col4" >0.293 ± 0.00596</td>
          <td id="T_44556_row2_col5" class="data row2 col5" >10 ± 0.0768</td>
        </tr>
        <tr>
          <th id="T_44556_level0_row3" class="row_heading level0 row3" >3</th>
          <td id="T_44556_row3_col0" class="data row3 col0" >diabetes</td>
          <td id="T_44556_row3_col1" class="data row3 col1" >0.292 ± 0.0237</td>
          <td id="T_44556_row3_col2" class="data row3 col2" >2.68 ± 0.183</td>
          <td id="T_44556_row3_col3" class="data row3 col3" >0.332 ± 0.0143</td>
          <td id="T_44556_row3_col4" class="data row3 col4" >0.28 ± 0.00666</td>
          <td id="T_44556_row3_col5" class="data row3 col5" >10.1 ± 0.225</td>
        </tr>
        <tr>
          <th id="T_44556_level0_row4" class="row_heading level0 row4" >4</th>
          <td id="T_44556_row4_col0" class="data row4 col0" >credit</td>
          <td id="T_44556_row4_col1" class="data row4 col1" >0.196 ± 0.0304</td>
          <td id="T_44556_row4_col2" class="data row4 col2" >4.05 ± 0.264</td>
          <td id="T_44556_row4_col3" class="data row4 col3" >0.324 ± 0.0359</td>
          <td id="T_44556_row4_col4" class="data row4 col4" >0.187 ± 0.00799</td>
          <td id="T_44556_row4_col5" class="data row4 col5" >9.39 ± 0.0327</td>
        </tr>
      </tbody>
    </table>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 233-247

Results
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Comparing the resulting tables above we notice that both methods:
RandomGridCV and Random Grid using Upper bounds are really similar in
performance, one can do better than the other depending on the datasets but
have overall the same error range.

Furthermore we can see how using the Upper bounds results in a great
improvement in the running time being around 4 times quicker than
the usual RandomGrid method.

We note that in every dataset the optimum value for the parameter s seems
to be  always around 0.3, that is why this value has been chosen to be
the default value for the library.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 41 minutes  40.407 seconds)


.. _sphx_glr_download_auto_examples_further_examples_plot_2_grid.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_2_grid.py <plot_2_grid.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_2_grid.ipynb <plot_2_grid.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
